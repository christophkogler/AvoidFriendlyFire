partially implemented. 



Suggested by @JimmSlimm

Further optimizations:
 - Instead of getting cells in the fire-line for EVERY cell in the miss radius, we can check a hollow half-circle, at the edge of miss radius, on the far side of the target (relative to the shooter). This should be almost identical in terms of cells added to the hash set which we check to ensure LOS is clear, while cutting total cells we examine in this process (and duplicate cells we attempt to add to the set) by a significant amount. (probably relatively minor optimization)


Fix 1:
        public static HashSet<int> GetFireCone(FireProperties fireProperties)
        {
            if (!fireProperties.ArePointsVisibleAndValid())
                return null;

            fireProperties.AdjustForLeaning();

            var missAreaDescriptor = fireProperties.GetMissAreaDescriptor();

            var result = new HashSet<int>();
            var map = Find.CurrentMap;

            IntVec3 centerToOrigin = fireProperties.Origin - fireProperties.Target; //Used in the loop

            for (var i = 0; i < missAreaDescriptor.AdjustmentCount; i++)
            {
                var splashTarget = fireProperties.Target + missAreaDescriptor.AdjustmentVector[i];

                // This quick math check determines if a miss point is on the "far side"
                // of the target relative to the shooter. By skipping these, we avoid
                // expensive calculations for half of the splash zone.
                IntVec3 centerToSample = splashTarget - fireProperties.Target;
                if ((long)centerToOrigin.x * centerToSample.x + (long)centerToOrigin.z * centerToSample.z > 0)
                    continue;

                result.UnionWith(GetShootablePointsBetween(fireProperties.Origin, splashTarget, map));
            }


            return result;
        }

Fix 2:
from this: return new MissAreaDescriptor(GenRadial.RadialPattern, GenRadial.NumCellsInRadius(missRadius));
to:
var ringCells = GenRadial.RadialCellsAround(Target, missRadius - 1, missRadius).ToArray();
return new MissAreaDescriptor(ringCells, ringCells.Length);